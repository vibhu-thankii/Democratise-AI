# File: app/core/config.py

from typing import Any, List, Optional

# Core Pydantic imports for settings and validation
from pydantic import AnyHttpUrl, PostgresDsn, field_validator, ValidationError
from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    """
    Application Settings loaded from environment variables and .env file.
    """

    # Configure Pydantic BaseSettings
    # Reads variables from a .env file, case_sensitive, allows extra fields to be ignored
    model_config = SettingsConfigDict(
        env_file=".env", env_file_encoding="utf-8", extra="ignore", case_sensitive=True
    )

    # API Settings
    API_V1_STR: str = "/api/v1"
    PROJECT_NAME: str = "Democratize AI Platform API"

    # Database settings (Expected to be in .env file)
    POSTGRES_SERVER: str
    POSTGRES_PORT: int = 5432  # Default PostgreSQL port
    POSTGRES_USER: str
    POSTGRES_PASSWORD: str
    POSTGRES_DB: str

    # Computed database connection URL field
    # This field's value will be generated by the validator below
    # Pydantic will validate the *final* value against the PostgresDsn type
    SQLALCHEMY_DATABASE_URI: Optional[str] = None

    # Validator for SQLALCHEMY_DATABASE_URI
    # Runs *before* Pydantic's default validation for the field (mode='before')
    # Assembles the connection string if it's not explicitly provided.
    @field_validator("SQLALCHEMY_DATABASE_URI", mode='before')
    @classmethod # Validators used with @field_validator should be classmethods
    def assemble_db_connection(cls, v: Optional[str], info) -> Any:
        """
        Assembles the database connection string from individual components
        if SQLALCHEMY_DATABASE_URI is not set directly in the environment.

        Args:
            v: The potential value already provided for SQLALCHEMY_DATABASE_URI.
            info: ValidationInfo object containing context, including other field values.

        Returns:
            The assembled database connection string or the provided value 'v'.
        Raises:
            ValueError: If required database connection components are missing.
        """
        # info.data contains the dictionary of other fields validated so far
        values = info.data

        if isinstance(v, str) and v:
            # If SQLALCHEMY_DATABASE_URI was explicitly provided (e.g., in .env)
            # return it directly. Pydantic will validate this string later.
            return v

        # If SQLALCHEMY_DATABASE_URI was not provided, assemble it from components
        user = values.get("POSTGRES_USER")
        password = values.get("POSTGRES_PASSWORD")
        server = values.get("POSTGRES_SERVER")
        port = values.get("POSTGRES_PORT")
        db = values.get("POSTGRES_DB")

        # Check if all required components are present
        if not all([user, password, server, port, db]):
             raise ValueError(
                "Missing one or more PostgreSQL connection details "
                "(POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_SERVER, "
                "POSTGRES_PORT, POSTGRES_DB) in environment variables / .env file."
            )

        # Construct and return the connection STRING.
        # Pydantic will take this string and validate it against the PostgresDsn type hint.
        return f"postgresql+psycopg2://{user}:{password}@{server}:{port}/{db}"

    # JWT Settings (Expected to be in .env file)
    SECRET_KEY: str  # Needs a strong, random secret key
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30  # Access token validity period (in minutes)

    # CORS Origins (List of allowed origins for Cross-Origin Resource Sharing)
    # Adjust these based on your frontend's deployment URL(s)
    BACKEND_CORS_ORIGINS: str =  "http://localhost","http://localhost:5173",  "http://localhost:3000", "http://127.0.0.1:5173", "http://127.0.0.1:3000"
        # Add your frontend production URL here, e.g., "https://yourdomain.com"


# Create a single, importable instance of the Settings class
# This will load settings from the environment/.env file upon import
# and run the validations.
try:
    settings = Settings()
except ValidationError as e:
    print("Error loading application settings:")
    print(e)
    # Optionally, exit or raise a more specific configuration error
    raise SystemExit("Failed to load application settings due to validation errors.") from e